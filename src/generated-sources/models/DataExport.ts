/* tslint:disable */
/* eslint-disable */
/**
 * Interopdata API
 * The Interopdata public API
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataExportDataset } from './DataExportDataset';
import {
    DataExportDatasetFromJSON,
    DataExportDatasetFromJSONTyped,
    DataExportDatasetToJSON,
} from './DataExportDataset';

/**
 * 
 * @export
 * @interface DataExport
 */
export interface DataExport {
    /**
     * 
     * @type {string}
     * @memberof DataExport
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DataExport
     */
    createdAt: string;
    /**
     * 
     * @type {Array<DataExportDataset>}
     * @memberof DataExport
     */
    datasets: Array<DataExportDataset>;
}

/**
 * Check if a given object implements the DataExport interface.
 */
export function instanceOfDataExport(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "datasets" in value;

    return isInstance;
}

export function DataExportFromJSON(json: any): DataExport {
    return DataExportFromJSONTyped(json, false);
}

export function DataExportFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataExport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['createdAt'],
        'datasets': ((json['datasets'] as Array<any>).map(DataExportDatasetFromJSON)),
    };
}

export function DataExportToJSON(value?: DataExport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt,
        'datasets': ((value.datasets as Array<any>).map(DataExportDatasetToJSON)),
    };
}

