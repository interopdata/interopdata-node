/* tslint:disable */
/* eslint-disable */
/**
 * Interopdata API
 * The Interopdata public API
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessToken,
  CreateAccessTokenDto,
  CreateCustomerDto,
  CreateDataExportDto,
  CreateDataExportLinkDto,
  Customer,
  DataExport,
  DataExportLink,
  Dataset,
} from '../models';
import {
    AccessTokenFromJSON,
    AccessTokenToJSON,
    CreateAccessTokenDtoFromJSON,
    CreateAccessTokenDtoToJSON,
    CreateCustomerDtoFromJSON,
    CreateCustomerDtoToJSON,
    CreateDataExportDtoFromJSON,
    CreateDataExportDtoToJSON,
    CreateDataExportLinkDtoFromJSON,
    CreateDataExportLinkDtoToJSON,
    CustomerFromJSON,
    CustomerToJSON,
    DataExportFromJSON,
    DataExportToJSON,
    DataExportLinkFromJSON,
    DataExportLinkToJSON,
    DatasetFromJSON,
    DatasetToJSON,
} from '../models';

export interface CreateCustomerRequest {
    createCustomerDto: CreateCustomerDto;
}

export interface CreateDataExportRequest {
    createDataExportDto: CreateDataExportDto;
}

export interface CreateDataExportLinkRequest {
    createDataExportLinkDto: CreateDataExportLinkDto;
}

export interface CreateOAuthTokenRequest {
    createAccessTokenDto: CreateAccessTokenDto;
}

export interface CustomersListRequest {
    createCustomerDto: CreateCustomerDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Customer>> {
        if (requestParameters.createCustomerDto === null || requestParameters.createCustomerDto === undefined) {
            throw new runtime.RequiredError('createCustomerDto','Required parameter requestParameters.createCustomerDto was null or undefined when calling createCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("project-secret", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerDtoToJSON(requestParameters.createCustomerDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFromJSON(jsonValue));
    }

    /**
     */
    async createCustomer(requestParameters: CreateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Customer> {
        const response = await this.createCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDataExportRaw(requestParameters: CreateDataExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createDataExportDto === null || requestParameters.createDataExportDto === undefined) {
            throw new runtime.RequiredError('createDataExportDto','Required parameter requestParameters.createDataExportDto was null or undefined when calling createDataExport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/data-exports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDataExportDtoToJSON(requestParameters.createDataExportDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createDataExport(requestParameters: CreateDataExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createDataExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createDataExportLinkRaw(requestParameters: CreateDataExportLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataExportLink>> {
        if (requestParameters.createDataExportLinkDto === null || requestParameters.createDataExportLinkDto === undefined) {
            throw new runtime.RequiredError('createDataExportLinkDto','Required parameter requestParameters.createDataExportLinkDto was null or undefined when calling createDataExportLink.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("project-secret", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/data-export-links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDataExportLinkDtoToJSON(requestParameters.createDataExportLinkDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataExportLinkFromJSON(jsonValue));
    }

    /**
     */
    async createDataExportLink(requestParameters: CreateDataExportLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataExportLink> {
        const response = await this.createDataExportLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createOAuthTokenRaw(requestParameters: CreateOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessToken>> {
        if (requestParameters.createAccessTokenDto === null || requestParameters.createAccessTokenDto === undefined) {
            throw new runtime.RequiredError('createAccessTokenDto','Required parameter requestParameters.createAccessTokenDto was null or undefined when calling createOAuthToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("project-secret", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccessTokenDtoToJSON(requestParameters.createAccessTokenDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenFromJSON(jsonValue));
    }

    /**
     */
    async createOAuthToken(requestParameters: CreateOAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessToken> {
        const response = await this.createOAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customersListRaw(requestParameters: CustomersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Customer>>> {
        if (requestParameters.createCustomerDto === null || requestParameters.createCustomerDto === undefined) {
            throw new runtime.RequiredError('createCustomerDto','Required parameter requestParameters.createCustomerDto was null or undefined when calling customersList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("project-secret", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerDtoToJSON(requestParameters.createCustomerDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerFromJSON));
    }

    /**
     */
    async customersList(requestParameters: CustomersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Customer>> {
        const response = await this.customersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dataExportsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataExport>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("user-token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/data-exports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataExportFromJSON));
    }

    /**
     */
    async dataExportsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataExport>> {
        const response = await this.dataExportsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async datasetsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Dataset>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("project-secret", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/datasets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DatasetFromJSON));
    }

    /**
     */
    async datasetsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Dataset>> {
        const response = await this.datasetsListRaw(initOverrides);
        return await response.value();
    }

}
